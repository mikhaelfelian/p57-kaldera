name: Deploy to kaldera.tigerasoft.com

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-kaldera
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH Connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust server host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Code to DirectAdmin (kaldera.tigerasoft.com)
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e

          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          REPO_SSH="git@github.com:mikhaelfelian/p57-kaldera.git"
          BRANCH="main"

          echo "== Deploying ke: \$DEPLOY_PATH =="

          # Pastikan folder ada
          mkdir -p "\$DEPLOY_PATH"
          cd "\$DEPLOY_PATH"

          # Perbaiki permission & safe.directory
          chown -R "\$USER:\$USER" "\$DEPLOY_PATH" 2>/dev/null || true
          chmod -R u+rwX "\$DEPLOY_PATH" 2>/dev/null || true
          git config --global --add safe.directory "\$DEPLOY_PATH" || true

          # Update repository
          if [ -d .git ]; then
            echo "Repository sudah ada, melakukan update..."
            git remote set-url origin "\$REPO_SSH" || true
            git fetch --all --prune
            git checkout "\$BRANCH" || true
            git reset --hard "origin/\$BRANCH"
            git clean -fd
          else
            echo "Repository belum ada, clone baru..."
            git clone -b "\$BRANCH" "\$REPO_SSH" .
          fi

          # Jalankan composer (jika ada)
          if command -v composer >/dev/null 2>&1; then
            echo "Menjalankan composer install..."
            composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction || true
          fi

          # Jalankan migrasi & reset opcache (jika PHP tersedia)
          if command -v php >/dev/null 2>&1; then
            echo "Menjalankan migrasi dan reset opcache..."
            php spark migrate --all --ansi || true
            php -r 'if(function_exists("opcache_reset")){ opcache_reset(); }'
          fi

          echo "== Deploy selesai =="
          EOF
